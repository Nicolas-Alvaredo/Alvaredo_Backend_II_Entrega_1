<h1>Carrito de Compras</h1>

{{#if cart.products.length}}
    <ul>
        {{#each cart.products}}
        <li>
            <strong>{{this.product.title}}</strong> - Cantidad: {{this.quantity}}
            <button onclick="removeFromCart('{{../cart._id}}', '{{this.product._id}}')">Eliminar</button>
        </li>
        {{/each}}
    </ul>

    <!-- BOTÓN PARA VACIAR TODO EL CARRITO -->
    <button onclick="clearCart('{{cart._id}}')" class="vaciar-carrito">🗑️ Vaciar Carrito</button>

{{else}}
    <p>El carrito está vacío.</p>
{{/if}}

<!-- BOTÓN PARA VOLVER A PRODUCTOS -->
<a href="/products">🔙 Volver a Productos</a>

<script src="/socket.io/socket.io.js"></script>
<script>
const socket = io(); // Conexión WebSocket

// 🔄 Escuchar eventos de actualización del carrito
socket.on("carritoActualizado", (cart) => {
    console.log("🛒 Carrito actualizado en tiempo real:", cart);
    location.reload(); // Recarga la página automáticamente cuando el carrito cambia
});
</script>


<script>
async function removeFromCart(cartId, productId) {
    try {
        const result = await Swal.fire({
            title: "¿Eliminar producto?",
            text: "¿Estás seguro de que deseas eliminar este producto del carrito?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Sí, eliminar",
            cancelButtonText: "Cancelar"
        });

        if (result.isConfirmed) {
            const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                method: "DELETE"
            });

            if (!response.ok) throw new Error("Error al eliminar producto");

            Swal.fire({
                title: "Eliminado",
                text: "El producto fue eliminado del carrito.",
                icon: "success",
                confirmButtonText: "OK"
            }).then(() => {
                location.reload();
            });
        }
    } catch (error) {
        console.error("❌ Error:", error);
        Swal.fire("Error", "No se pudo eliminar el producto.", "error");
    }
}

async function clearCart(cartId) {
    try {
        const result = await Swal.fire({
            title: "¿Vaciar carrito?",
            text: "¿Estás seguro de que deseas eliminar todos los productos del carrito?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Sí, vaciar",
            cancelButtonText: "Cancelar"
        });

        if (result.isConfirmed) {
            const response = await fetch(`/api/carts/${cartId}`, {
                method: "DELETE"
            });

            if (!response.ok) throw new Error("Error al vaciar el carrito");

            Swal.fire({
                title: "Carrito vacío",
                text: "Todos los productos fueron eliminados del carrito.",
                icon: "success",
                confirmButtonText: "OK"
            }).then(() => {
                location.reload();
            });
        }
    } catch (error) {
        console.error("❌ Error:", error);
        Swal.fire("Error", "No se pudo vaciar el carrito.", "error");
    }
}
</script>
